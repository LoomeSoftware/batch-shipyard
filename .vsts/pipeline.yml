name: $(SourceBranch)$(Rev:.r)

variables:
- name: python.version
  value: '3.7' 
- name: PYENV_VERSION
  value: '3.7.5' 
- name: python.version
  value: '16.2.0' 

jobs:
  - job: Windows
    pool:
      vmImage: windows-latest
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PYENV_VERSION)
          architecture: x64
      - powershell: |
          gci env:* | sort-object name
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel
          python -m pip install -r requirements.txt
          python -m pip install --no-deps -r req_nodeps.txt
          python -m pip install flake8==3.6.0
          python -m pip list --format=columns --outdated
        displayName: Fetch Dependencies
      - powershell: |
          flake8 --select F,E,W --ignore W504 --statistics shipyard.py convoy\*.py
          if ($env:PYTHON_VERSION -eq "3.7") {
            flake8 --select F,E,W --ignore W504 --statistics cascade\*.py cargo\*.py federation\*.py heimdall\*.py slurm\*.py
          }
        displayName: Static Analysis
      - powershell: |
          $artifactCli = "batch-shipyard-" + $env:BUILD_SOURCEBRANCHNAME + "-" + $env:BUILD_BUILDID + "-cli-win-amd64.exe"
          $artifactUploadPath = "builds/" + $env:BUILD_SOURCEBRANCHNAME
          $buildverDotted = "0.0.0"
          $bvt0,$bvt1,$bvt2 = $buildverDotted.split('.')
          $buildverTuple = [string]::Format("({0}, {1}, {2}, {3})",$bvt0,$bvt1,$bvt2,$env:BUILD_BUILDID)
          echo "##vso[task.setvariable variable=BUILDVER_DOTTED;]$buildverDotted"
          echo "##vso[task.setvariable variable=BUILDVER_TUPLE;]$buildverTuple"
          echo "##vso[task.setvariable variable=ARTIFACT_CLI;]$artifactCli"
          echo "##vso[task.setvariable variable=ARTIFACT_UPLOAD_PATH;]$artifactUploadPath"
        displayName: Pre-build Environment (Branch)
        condition: >
          and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
          in(variables['Build.SourceBranchName'], 'master', 'develop'), eq(variables['python.version'], '3.7'))
      - powershell: |
          git tag -l --points-at $env:BUILD_SOURCEVERSION | Tee-Object -Variable gitTag
          $gitTag -match "^([\d\.])+"
          $buildverDotted = $matches[0]
          if ($gitTag -match "([a-z]+\d+)") {
            $nugetPkgVer = $buildverDotted + "-" + $matches[1]
          } else {
            $nugetPkgVer = $buildverDotted
          }
          $artifactCli = "batch-shipyard-" + $gitTag + "-cli-win-amd64.exe"
          $artifactUploadPath = "releases/" + $gitTag
          $bvt0,$bvt1,$bvt2 = $buildverDotted.split('.')
          $buildverTuple = [string]::Format("({0}, {1}, {2}, {3})",$bvt0,$bvt1,$bvt2,$env:BUILD_BUILDID)
          echo "##vso[task.setvariable variable=BUILDVER_DOTTED;]$buildverDotted"
          echo "##vso[task.setvariable variable=BUILDVER_TUPLE;]$buildverTuple"
          echo "##vso[task.setvariable variable=NUGET_PACKAGE_VERSION;]$nugetPkgVer"
          echo "##vso[task.setvariable variable=GIT_TAG;]$gitTag"
          echo "##vso[task.setvariable variable=ARTIFACT_CLI;]$artifactCli"
          echo "##vso[task.setvariable variable=ARTIFACT_UPLOAD_PATH;]$artifactUploadPath"
          echo "##vso[task.setvariable variable=DOCKER_TAG;]$gitTag"
        displayName: Pre-build Environment (Tagged Release)
        condition: >
          and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['python.version'], '3.7'))
      - powershell: |
          $artifactCliPath = "bin\\" + $env:ARTIFACT_CLI
          echo "##vso[task.setvariable variable=ARTIFACT_CLI_PATH;]$artifactCliPath"
          $branchGitSha1 = [string]::Format("{0}@{1}",$env:BUILD_SOURCEBRANCHNAME,$env:BUILD_SOURCEVERSION.Substring(0,7))
          echo "$env:ARTIFACT_CLI $env:BUILDVER_TUPLE $branchGitSha1"
          $fileverInfo = "images\\docker\\windows\\file_version_info.txt"
          (Get-Content $fileverInfo).replace('{BUILDVER_TUPLE}', $env:BUILDVER_TUPLE) | Set-Content $fileverInfo
          (Get-Content $fileverInfo).replace('{BUILDVER_DOTTED}', $env:BUILDVER_DOTTED) | Set-Content $fileverInfo
          (Get-Content $fileverInfo).replace('{BRANCH_GITSHA1}', $branchGitSha1) | Set-Content $fileverInfo
          (Get-Content $fileverInfo).replace('{EXE}', $env:ARTIFACT_CLI) | Set-Content $fileverInfo
          if(Test-Path env:VENV_VERSION)
          {
            python -m pip install virtualenv==$env:VENV_VERSION
          }
          else
          {
            python -m pip install virtualenv
          }
          python -m virtualenv pyi
        displayName: Pre-build
        condition: and(succeeded(), ne(variables['ARTIFACT_CLI'], ''))
      - script: |
          echo "ARTIFACT_CLI=%ARTIFACT_CLI% ARTIFACT_CLI_PATH=%ARTIFACT_CLI_PATH% ARTIFACT_UPLOAD_PATH=%ARTIFACT_UPLOAD_PATH%"
          call pyi\\Scripts\\activate.bat
          pip -V
          pip install --no-cache-dir pyinstaller
          pip install --upgrade -r requirements.txt
          pip install --upgrade --no-deps -r req_nodeps.txt
          pyinstaller -F -n "%ARTIFACT_CLI%" -p batch-shipyard --add-data federation\\docker-compose.yml;federation --add-data heimdall;heimdall --add-data schemas;schemas --add-data scripts;scripts --exclude-module future.tests --exclude-module future.backports.test --exclude-module future.moves.test --icon images\\docker\\windows\\azure.ico --version-file images\\docker\\windows\\file_version_info.txt --distpath bin shipyard.py
          blobxfer upload --storage-account "$(blobxfer.storageAccount)" --storage-account-key "$(blobxfer.storageAccountKey)" --remote-path "%ARTIFACT_UPLOAD_PATH%" --local-path "%ARTIFACT_CLI_PATH%" --strip-components 1 --file-md5 --overwrite
          call pyi\\Scripts\\deactivate.bat
        displayName: Build
        condition: and(succeeded(), ne(variables['ARTIFACT_CLI'], ''))
      - powershell: |
          Invoke-WebRequest "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile "nuget.exe"
          $env:GIT_TAG | Out-File site-extension\\version.txt -Force -NoNewline -Encoding ASCII
          Get-Content -Path site-extension\\version.txt
          $nugetArtifact = 'BatchShipyard.' + $env:NUGET_PACKAGE_VERSION + '.nupkg'
          echo "##vso[task.setvariable variable=NUGET_ARTIFACT;]$nugetArtifact"
          .\\nuget.exe pack site-extension\\BatchShipyard.nuspec -Version $env:NUGET_PACKAGE_VERSION
          [Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem')
          $zip = [IO.Compression.ZipFile]::OpenRead($nugetArtifact)
          foreach($entry in $zip.Entries) {
            [string]::Format("{0}: {1} -> {2}", $entry.FullName, $entry.Length, $entry.CompressedLength)
          }
          $zip.Dispose()
          move $nugetArtifact bin\\$nugetArtifact
          dir bin
        displayName: Nuget Pack
        condition: and(succeeded(), ne(variables['NUGET_PACKAGE_VERSION'], ''))
      - powershell: |
          $versionTag = "bin\\version_tag.txt"
          $env:GIT_TAG | Out-File $versionTag -Force -NoNewline -Encoding ASCII
          Get-Content -Path $versionTag
          copy .vsts\\populate_tag.ps1 bin\\populate_tag.ps1
          dir bin
        displayName: Generate Version Tag File
        condition: and(succeeded(), ne(variables['GIT_TAG'], ''))
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: bin
          artifactName: BatchShipyard-Windows
        condition: and(succeeded(), ne(variables['ARTIFACT_CLI'], ''))
      - powershell: |
          docker version
          docker login "$(docker.servername)" -u="$(docker.username)" -p="$(docker.password)"
          $cargoImage = "$(docker.servername)/public/azure-batch/shipyard:" + $env:GIT_TAG + "-cargo-windows"
          $cliImage = "$(docker.servername)/public/azure-batch/shipyard:" + $env:GIT_TAG + "-cli-windows"
          pushd images\\docker\\windows\\cargo
          docker build --build-arg GIT_BRANCH=$env:BUILD_SOURCEBRANCHNAME --build-arg GIT_COMMIT=$env:BUILD_SOURCEVERSION -t $cargoImage .
          docker push $cargoImage
          popd
          pushd images\\docker\\windows\\cli
          docker build --build-arg GIT_BRANCH=$env:BUILD_SOURCEBRANCHNAME --build-arg GIT_COMMIT=$env:BUILD_SOURCEVERSION -t $cliImage .
          docker push $cliImage
          popd
        displayName: Docker build
        condition: and(succeeded(), ne(variables['DOCKER_TAG'], ''))